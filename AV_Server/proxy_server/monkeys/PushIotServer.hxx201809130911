#if !defined(RESIP_PushIotServer_HXX)
#define RESIP_PushIotServer_HXX 

#include "rutil/Data.hxx"
#include "AsyncProcessor.hxx"
#include "ProxyConfig.hxx"
#include "resip/dum/RegistrationPersistenceManager.hxx"

//#include "NotifyPrivateMesage.hxx"
#include "ConServerSynClient.hxx"

//#include "ConServerSynClient.hxx"
namespace resip
{
   class SipStack;
}

namespace repro
{
    typedef struct _MediaPortSource{
            short int relay_caller_audio_rtp_port;  //呼叫音频RTP端口
            short int relay_caller_audio_rtcp_port; //呼叫音频RTCP端口
            short int relay_caller_video_rtp_port;  //呼叫视频RTP端口
            short int relay_caller_video_rtcp_port; //呼叫视频RTCP端口
            short int relay_callee_audo_io_rtp_port;//被呼叫音频RTP端口
            short int relay_callee_audo_io_rtcp_port;//被呼叫音频RTCP端口
            short int relay_callee_video_io_rtp_port;//被呼叫视频RTP端口
            short int relay_callee_video_io_rtcp_port;//被呼叫视频RTCP端口
            _MediaPortSource(){
                relay_caller_audio_rtp_port     =0;
                relay_caller_audio_rtcp_port    =0;
                relay_caller_video_rtp_port     =0;
                relay_caller_video_rtcp_port    =0;
                relay_callee_audo_io_rtp_port   =0;
                relay_callee_audo_io_rtcp_port  =0;
                relay_callee_video_io_rtp_port  =0;
                relay_callee_video_io_rtcp_port =0;
            }
       }MediaPortSource;

class PushIotServer : public AsyncProcessor
{
   public:
	   PushIotServer(ProxyConfig& config, Dispatcher* asyncDispatcher, resip::RegistrationPersistenceManager& store);
	   ~PushIotServer();

      // Processor virutal method
      virtual processor_action_t process(RequestContext &);

      // Virtual method called from WorkerThreads
      virtual bool asyncProcess(AsyncProcessorMessage* msg);
      
      //interface used for notify processing
      //bool NotifyMsgPost(const resip::NotifyMessage& stNotifyMsg);
	  //bool NotifyMsgPost(const resip::ContactList& vdstContact, RequestContext& rc);
      
      /*组装策略服务器获取流媒体IP的JSON*/
      void SendConServerForMediaIpJson(std::auto_ptr<ConServerSynClient> plcli,std::string &strMediaIp,int & iport);
    /*组装流媒体服务器获取流媒体端口的JSON*/
      void SendMediaForMediaPortJson(std::auto_ptr<ConServerSynClient> plcli,std::string strcallId);
    /*组装发送给IOT推送的JSON*/
      void SendIotForPush(std::auto_ptr<ConServerSynClient> plcli,std::string strFrom,std::string strTo);


       /*解析JSON拿到流媒体IP*/
       void ParseMediaIP(rapidjson::Document &inroot,std::string &strMediaIp,int & iport);
       
       /*解析JSON拿到流媒体8个端口*/
       void ParseMediaPort(rapidjson::Document &inroot,MediaPortSource &AllPortData);

    /*解析JSON获取IOT的回包*/
      void ParseIotReturnPackage(rapidjson::Document &inroot);

	  std::string ConverJason2String(rapidjson::Document &inroot);
	  
   private:
	   short parseActionResult(const resip::Data& result, resip::Data& redirectReason);
	   processor_action_t applyActionResult(RequestContext &rc, const resip::Data& actionResult, const resip::NameAddr& serverAddr);
	   resip::Data mDefaultErrorBehavior;
       /*pocily config*/
	     resip::Data mSipConServerIP;
       int mSipConServerPort;
       
       /*media config*/
       resip::Data mMediaServerIP;
       int mMediaServerPort;
       
       /*Iot config*/
       resip::Data mIotServerIP;
       int mIotServerPort;

	   resip::RegistrationPersistenceManager& mStore;
       MediaPortSource mMediaPortData;
};

}
#endif

